CREATE OR REPLACE TRIGGER update_deleted_flag
AFTER UPDATE OF IS_DELETED 
ON "USER"
FOR EACH ROW
BEGIN
    IF :old."TYPE" = 'Customer' THEN
        UPDATE customer
        SET IS_DELETED = :NEW.IS_DELETED
        WHERE user_id = :new.user_id;
    ELSIF :old."TYPE" = 'Corp' THEN
        UPDATE corporation
        SET IS_DELETED = :NEW.IS_DELETED
        WHERE corp_id = :new.user_id;
    ELSIF :old."TYPE" = 'Broker' THEN
        UPDATE broker
        SET IS_DELETED = :NEW.IS_DELETED
        WHERE user_id = :new.user_id;
    ELSIF :old."TYPE" = 'Admin' THEN
        UPDATE admin
        SET IS_DELETED = :NEW.IS_DELETED
        WHERE admin_id = :new.user_id;
    END IF;
END;
/ 

CREATE OR REPLACE TRIGGER update_blocked_flag
AFTER UPDATE OF BLOCKED ON stock
FOR EACH ROW
DECLARE 
COUNT_SYM NUMBER;
BEGIN
		SELECT COUNT(SYMBOL) INTO COUNT_SYM FROM "BACKUP STOCK" WHERE SYMBOL = :NEW.SYMBOL;
		IF COUNT_SYM = 0 THEN 
			UPDATE "BACKUP STOCK"
			SET blocked = :NEW.BLOCKED
			WHERE SYMBOL = :new.SYMBOL;
		END IF;
END;
/


CREATE OR REPLACE TRIGGER delete_user_contact
AFTER UPDATE OF IS_DELETED 
ON "USER"
FOR EACH ROW
DECLARE
COUNT_CONTACT NUMBER;
BEGIN
	IF :NEW.IS_DELETED = 'T' THEN  
		SELECT COUNT(*) INTO COUNT_CONTACT FROM USER_CONTACT WHERE USER_ID = :NEW.USER_ID;
		IF COUNT_CONTACT > 0 THEN 
			DELETE FROM USER_CONTACT WHERE USER_ID = :NEW.USER_ID; 
		END IF;
	END IF;
END;
/ 


CREATE OR REPLACE TRIGGER delete_emp_contact
AFTER UPDATE OF IS_DELETED 
ON EMPLOYEE
FOR EACH ROW
DECLARE
COUNT_CONTACT NUMBER;
BEGIN
	IF :NEW.IS_DELETED = 'T' THEN  
		SELECT COUNT(*) INTO COUNT_CONTACT FROM EMP_CONTACT WHERE EMPLOYEE_ID = :NEW.EMPLOYEE_ID;
		IF COUNT_CONTACT > 0 THEN 
			DELETE FROM EMP_CONTACT WHERE EMPLOYEE_ID = :NEW.EMPLOYEE_ID; 
		END IF;
	END IF;
END;
/ 

CREATE OR REPLACE TRIGGER delete_order_on_blocking_stock
AFTER UPDATE OF BLOCKED 
ON STOCK 
FOR EACH ROW 
BEGIN 
	IF :NEW.BLOCKED = 'T' THEN 
		DELETE FROM "ORDER" 
		WHERE SYMBOL = :NEW.SYMBOL AND STATUS = 'PENDING';
	END IF;
END;
/

CREATE OR REPLACE TRIGGER delete_order_on_deleting_user
AFTER UPDATE OF IS_DELETED 
ON "USER"
FOR EACH ROW 
BEGIN 
	IF :NEW.IS_DELETED = 'T' THEN 
		DELETE FROM "ORDER" 
		WHERE USER_ID = :NEW.USER_ID AND STATUS = 'PENDING';
	END IF;
END;
/

CREATE OR REPLACE TRIGGER delete_participation_on_deleting_user
AFTER UPDATE OF IS_DELETED 
ON "USER"
FOR EACH ROW 
BEGIN 
	IF :NEW.IS_DELETED = 'T' THEN 
		DELETE FROM PARTICIPATION
		WHERE USER_ID = :NEW.USER_ID;
	END IF;
END;
/ 

CREATE OR REPLACE TRIGGER delete_upcoming_activity_on_deleting_corp
AFTER UPDATE OF IS_DELETED 
ON CORPORATION
FOR EACH ROW 
BEGIN 
	IF :NEW.IS_DELETED = 'T' THEN 
		DELETE FROM ACTIVITY
		WHERE CORP_ID = :NEW.CORP_ID AND START_TIME >= CURRENT_TIMESTAMP;
	END IF;
END;
/ 

CREATE OR REPLACE TRIGGER block_stock_on_deleting_corp 
AFTER UPDATE OF IS_DELETED 
ON CORPORATION
FOR EACH ROW 
BEGIN 
	IF :NEW.IS_DELETED = 'T' THEN 
			UPDATE STOCK 
			SET BLOCKED = 'T'
			WHERE CORP_ID = :NEW.CORP_ID;
	END IF;
END;
/

CREATE OR REPLACE TRIGGER delete_owns_on_deleting_user 
AFTER UPDATE OF IS_DELETED 
ON "USER"
FOR EACH ROW 
BEGIN 
	IF :NEW.IS_DELETED = 'T' THEN 
			DELETE FROM OWNS 
			WHERE USER_ID = :NEW.USER_ID;
	END IF;
END;
/
 
CREATE OR REPLACE TRIGGER delete_portfolio_on_deleting_customer 
AFTER UPDATE OF IS_DELETED 
ON CUSTOMER
FOR EACH ROW
BEGIN 
	IF :NEW.IS_DELETED = 'T' THEN 
		DELETE FROM PORTFOLIO 
		WHERE USER_ID = :NEW.USER_ID;
	END IF;
END;
/

 
CREATE OR REPLACE TRIGGER 
set_null_broker_id
AFTER UPDATE OF IS_DELETED 
ON BROKER
FOR EACH ROW
BEGIN
	IF :NEW.IS_DELETED = 'T' THEN 
		UPDATE CUSTOMER
		SET BROKER_ID = null 
		WHERE BROKER_ID = :NEW.USER_ID;
	END IF;
END;
/

CREATE OR REPLACE TRIGGER 
set_null_referer_id
AFTER UPDATE OF IS_DELETED 
ON CUSTOMER
FOR EACH ROW
BEGIN
	IF :NEW.IS_DELETED = 'T' THEN 
		UPDATE CUSTOMER
		SET REFERER_ID = null 
		WHERE REFERER_ID = :NEW.USER_ID;
	END IF;
END;
/



