CREATE OR REPLACE TRIGGER place_order_user_check
BEFORE INSERT
ON "ORDER"
FOR EACH ROW 
DECLARE 
TYP VARCHAR2(20);
BEGIN
    SELECT "TYPE" INTO TYP FROM "USER" WHERE USER_ID = :NEW.USER_ID;
    IF TYP NOT IN ('Admin','Customer') THEN 
        RAISE_APPLICATION_ERROR(-20001,'User not permitted');
    END IF;
END;
/

CREATE OR REPLACE TRIGGER place_order_symbol_check
BEFORE INSERT
ON "ORDER"
FOR EACH ROW 
DECLARE 
SYM VARCHAR2(40);
BEGIN
    SELECT SYMBOL INTO SYM FROM STOCK WHERE SYMBOL = :NEW.SYMBOL AND BLOCKED = 'F';  
	IF SYM IS NULL THEN  
        RAISE_APPLICATION_ERROR(-20002,'Invalid stock');
	END IF;
END;
/

CREATE OR REPLACE TRIGGER buy_order_amount_check 
BEFORE INSERT OR UPDATE OF LATEST_QUANTITY
ON "ORDER"
FOR EACH ROW 
DECLARE 
NUM_SHARES NUMBER;
ALLOWED_SHARES NUMBER;
BEGIN
    IF :NEW."TYPE" = 'BUY' THEN
        SELECT LOT INTO NUM_SHARES FROM STOCK WHERE SYMBOL = :NEW.SYMBOL;
        SELECT LOT*AVAILABLE_LOTS INTO ALLOWED_SHARES FROM STOCK WHERE SYMBOL = :NEW.SYMBOL;
        IF :NEW.LATEST_QUANTITY*NUM_SHARES > ALLOWED_SHARES OR :NEW.LATEST_QUANTITY*NUM_SHARES < 0 THEN 
            RAISE_APPLICATION_ERROR(-20003,'Invalid amount of stock');
        END IF;
        :NEW.LATEST_QUANTITY := :NEW.LATEST_QUANTITY*NUM_SHARES;
    END IF;
END;
/

CREATE OR REPLACE TRIGGER sell_order_amount_check 
BEFORE INSERT OR UPDATE OF LATEST_QUANTITY
ON "ORDER"
FOR EACH ROW 
DECLARE 
TYP VARCHAR2(20);
NUM_SHARES NUMBER;
AVAILABLE_SHARE_LOTS NUMBER;
AVAILABLE_SHARES NUMBER;
BEGIN
    SELECT NVL(LOT,0) INTO NUM_SHARES FROM STOCK WHERE SYMBOL = :NEW.SYMBOL;
    IF :NEW."TYPE" = 'SELL' THEN
        SELECT "TYPE" INTO TYP FROM "USER" WHERE USER_ID = :NEW.USER_ID;
        IF TYP = 'Admin' THEN
            SELECT 
                NVL(AVAILABLE_LOTS,0) INTO AVAILABLE_SHARE_LOTS 
            FROM "BACKUP STOCK"
            WHERE SYMBOL = :NEW.SYMBOL;
            IF :NEW.LATEST_QUANTITY > AVAILABLE_SHARE_LOTS OR :NEW.LATEST_QUANTITY*NUM_SHARES < 0 THEN 
                RAISE_APPLICATION_ERROR(-20003,'Invalid amount of stock');
            END IF;
        ELSIF TYP = 'Customer' THEN
            SELECT 
                NVL(QUANTITY,0) INTO AVAILABLE_SHARES 
            FROM OWNS 
            WHERE 
                USER_ID = :NEW.USER_ID AND 
                SYMBOL = :NEW.SYMBOL;
            IF :NEW.LATEST_QUANTITY * NUM_SHARES > AVAILABLE_SHARES  OR :NEW.LATEST_QUANTITY*NUM_SHARES < 0 THEN 
                RAISE_APPLICATION_ERROR(-20003,'Invalid amount of stock');
            END IF;
        ELSE 
            RAISE_APPLICATION_ERROR(-20001,'User not permitted');
        END IF;
        :NEW.LATEST_QUANTITY := :NEW.LATEST_QUANTITY*NUM_SHARES;
    END IF;
END;
/

CREATE OR REPLACE TRIGGER latest_update_time_set
BEFORE INSERT OR UPDATE
ON "ORDER"
FOR EACH ROW 
BEGIN
    :NEW.LATEST_UPDATE_TIME := CURRENT_TIMESTAMP;
END;
/


CREATE OR REPLACE TRIGGER transaction_fee_set 
BEFORE INSERT OR UPDATE
ON "ORDER"
FOR EACH ROW
DECLARE 
TYP VARCHAR2(20);
BEGIN
    IF :NEW.STATUS = 'FAILURE' THEN
        :NEW.TRANSACTION_FEE := 0;
    ELSE 
        SELECT "TYPE" INTO TYP FROM "USER" WHERE USER_ID = :NEW.USER_ID;
        IF TYP = 'Admin' THEN 
            :NEW.TRANSACTION_FEE := 0;
        ELSIF TYP = 'Customer' THEN  
            :NEW.TRANSACTION_FEE := ROUND(:NEW.LATEST_PRICE * :NEW.LATEST_QUANTITY * 0.05 / 100,0);
        END IF;
    END IF;
END; 
/

CREATE OR REPLACE TRIGGER transaction_time_set
BEFORE UPDATE
ON "ORDER"
FOR EACH ROW
BEGIN
    IF :NEW.STATUS IN ('SUCCESS') THEN 
        :NEW.TRANSACTION_TIME := CURRENT_TIMESTAMP;
    END IF;
END;
/


CREATE OR REPLACE TRIGGER sell_order_status_check 
BEFORE UPDATE 
ON "ORDER"
FOR EACH ROW
BEGIN
    IF :NEW.STATUS = 'FAILURE' AND :NEW."TYPE" = 'SELL' THEN 
		RAISE_APPLICATION_ERROR(-20004,'Sell order can never fail');
	END IF;
END;
/

CREATE OR REPLACE TRIGGER buy_order_success_update_owns_or_backup_stock
AFTER UPDATE
ON "ORDER"
FOR EACH ROW
DECLARE 
TYP VARCHAR2(20);
SYM VARCHAR2(40);
USID NUMBER;
BEGIN 
    IF :NEW.STATUS = 'SUCCESS' AND :NEW."TYPE" = 'BUY' THEN 
        SELECT "TYPE" INTO TYP FROM "USER" WHERE USER_ID = :NEW.USER_ID;
        IF TYP IS 'Admin' THEN
            SELECT SYMBOL INTO SYM 
            FROM "BACKUP STOCK"
            WHERE SYMBOL = :NEW.SYMBOL;
            IF SYM IS NULL
                INSERT INTO "BACKUP STOCK" VALUES (:NEW.SYMBOL,:NEW.LATEST_QUANTITY/(SELECT LOT FROM STOCK WHERE SYMBOL = SYM));
            ELSE 
                UPDATE "BACKUP STOCK" 
				SET AVAILABLE_LOTS = AVAILABLE_LOTS + :NEW.LATEST_QUANTITY/(SELECT LOT FROM STOCK WHERE SYMBOL = SYM)
				WHERE SYMBOL = :NEW.SYMBOL;
            END IF;
        ELSIF TYP IS 'Customer' THEN 
            SELECT SYMBOL INTO SYM FROM OWNS WHERE SYMBOL = :NEW.SYMBOL;
			SELECT USER_ID INTO USID FROM OWNS WHERE USER_ID = :NEW.USER_ID;

            IF SYM IS NULL OR USID IS NULL THEN 
				INSERT INTO OWNS VALUES(:NEW.USER_ID,:NEW.SYMBOL,:NEW.LATEST_QUANTITY);
			ELSE 
				UPDATE OWNS
				SET QUANTITY = QUANTITY + :NEW.LATEST_QUANTITY
				WHERE USER_ID = USID AND SYMBOL = SYM;
			END IF;
        END IF;

        UPDATE OWNS
		SET QUANTITY = QUANTITY - :NEW.LATEST_QUANTITY
		WHERE USER_ID = (SELECT CORP_ID FROM STOCK WHERE SYMBOL = SYM) AND SYMBOL = SYM;
    END IF;
END;
/


CREATE OR REPLACE TRIGGER buy_order_success_update_available_lots_from_stock
AFTER UPDATE
ON "ORDER"
FOR EACH ROW
BEGIN
    IF :NEW.STATUS = 'SUCCESS' AND :NEW."TYPE" = 'BUY' THEN 
        UPDATE STOCK
		SET 
        AVAILABLE_LOTS = AVAILABLE_LOTS - :NEW.LATEST_QUANTITY/(SELECT LOT FROM STOCK WHERE SYMBOL = SYM)
		WHERE SYMBOL = :NEW.SYMBOL;
    END IF;
END;
/

CREATE OR REPLACE TRIGGER buy_order_success_update_customer_portfolio 
AFTER UPDATE
ON "ORDER"
FOR EACH ROW
DECLARE 
PORTFOLIO_SECTOR VARCHAR2(40);
USID NUMBER;
USER_TYPE VARCHAR2(30);
BEGIN
    SELECT "TYPE" INTO USER_TYPE FROM "USER" WHERE USER_ID = :NEW.USER_ID;
    IF :NEW.STATUS = 'SUCCESS' AND :NEW."TYPE" = 'BUY' AND USER_TYPE = 'Customer' THEN 
        SELECT SECTOR INTO PORTFOLIO_SECTOR FROM PORTFOLIO WHERE SECTOR = SECTOR_OF_STOCK(:NEW.SYMBOL);
        SELECT USER_ID INTO USID FROM PORTFOLIO WHERE USER_ID = :NEW.USER_ID;
        
        IF PORTFOLIO_SECTOR IS NULL OR USID IS NULL THEN
            INSERT INTO PORTFOLIO VALUES (:NEW.USER_ID,SECTOR_OF_STOCK(:NEW.SYMBOL),:NEW.LATEST_PRICE*:NEW.LATEST_QUANTITY,0);
        ELSE 
            UPDATE PORTFOLIO
            SET BUY_AMOUNT = BUY_AMOUNT + :NEW.LATEST_PRICE*:NEW.LATEST_QUANTITY
            WHERE USER_ID = USERID AND SECTOR = PORTSEC;
        END IF;
    END IF;
END;
/

-- write commission_pct update trigger 

CREATE OR REPLACE TRIGGER sell_order_success_update_owns_or_backup_stock
AFTER UPDATE
ON "ORDER"
FOR EACH ROW
DECLARE 
TYP VARCHAR2(20);
SYM VARCHAR2(40);
USID NUMBER;
BEGIN 
    IF :NEW.STATUS = 'SUCCESS' AND :NEW."TYPE" = 'SELL' THEN 
        SELECT "TYPE" INTO TYP FROM "USER" WHERE USER_ID = :NEW.USER_ID;
        IF TYP IS 'Admin' THEN
            UPDATE "BACKUP STOCK" 
            SET AVAILABLE_LOTS = AVAILABLE_LOTS - :NEW.LATEST_QUANTITY/(SELECT LOT FROM STOCK WHERE SYMBOL = SYM)
            WHERE SYMBOL = :NEW.SYMBOL;
        ELSIF TYP IS 'Customer' THEN 
            UPDATE OWNS
            SET QUANTITY = QUANTITY - :NEW.LATEST_QUANTITY
            WHERE USER_ID = :NEW.USER_ID AND SYMBOL = :NEW.SYMBOL;
        END IF;
    END IF;
END;

CREATE OR REPLACE TRIGGER order_success_update_stock_ltp 
AFTER UPDATE
ON "ORDER"
FOR EACH ROW
BEGIN
    IF :NEW.STATUS = 'SUCCESS' THEN
        UPDATE STOCK 
        SET LTP = :NEW.LATEST_PRICE;
        WHERE SYMBOL = :NEW.SYMBOL;
    END IF;
END;
/

CREATE OR REPLACE TRIGGER sell_order_success_update_customer_portfolio 
AFTER UPDATE
ON "ORDER"
FOR EACH ROW
DECLARE 
PORTFOLIO_SECTOR VARCHAR2(40);
USID NUMBER;
USER_TYPE VARCHAR2(30);
BEGIN 
    SELECT "TYPE" INTO USER_TYPE FROM "USER" WHERE USER_ID = :NEW.USER_ID;
    IF :NEW.STATUS = 'SUCCESS' AND :NEW."TYPE" = 'SELL' AND USER_TYPE = 'Customer' THEN 
        SELECT SECTOR INTO PORTFOLIO_SECTOR FROM PORTFOLIO WHERE SECTOR = SECTOR_OF_STOCK(:NEW.SYMBOL);
        SELECT USER_ID INTO USID FROM PORTFOLIO WHERE USER_ID = :NEW.USER_ID;
        
        IF PORTFOLIO_SECTOR IS NULL OR USID IS NULL THEN
            INSERT INTO PORTFOLIO VALUES (:NEW.USER_ID,SECTOR_OF_STOCK(:NEW.SYMBOL),0,:NEW.LATEST_PRICE*:NEW.LATEST_QUANTITY);
        ELSE 
            UPDATE PORTFOLIO
            SET SELL_AMOUNT = SELL_AMOUNT + :NEW.LATEST_PRICE*:NEW.LATEST_QUANTITY
            WHERE USER_ID = USERID AND SECTOR = PORTSEC;
        END IF;
    END IF;
END;
/


CREATE OR REPLACE TRIGGER update_broker_commission_pct
AFTER UPDATE
ON "ORDER"
FOR EACH ROW 
DECLARE 
NEW_COM_PCT NUMBER(5,2);
OLD_COM_PCT NUMBER(5,2);
BID NUMBER;
USER_TYPE VARCHAR2(30);
BEGIN 
    SELECT "TYPE" INTO USER_TYPE FROM "USER" WHERE USER_ID = :NEW.USER_ID;
    IF :NEW.STATUS = 'SUCCESS' AND USER_TYPE = 'Customer' THEN
        SELECT BROKER_ID INTO BID FROM CUSTOMER WHERE USER_ID = :NEW.USER_ID;
        NEW_COM_PCT := BROKER_COMMISSION_PCT(BID);
        SELECT COMMISSION_PCT INTO OLD_COM_PCT FROM BROKER WHERE USER_ID = BID;
        IF OLD_COM_PCT <> NEW_COM_PCT THEN
            UPDATE BROKER 
            SET COMMISSION_PCT = NEW_COM_PCT
            WHERE USER_ID = BID;
        END IF;
    END IF;
END;
/


























-- Checking triggers 
BEGIN



END;
/

UPDATE "ORDER" SET STATUS = 'FAILURE' WHERE "ORDER_ID" = 2966;
SELECT * FROM  "ORDER" WHERE ORDER_ID >= ALL(SELECT ORDER_ID FROM "ORDER");



DELETE FROM "ORDER" WHERE ORDER_ID >= ALL(SELECT ORDER_ID FROM "ORDER");
