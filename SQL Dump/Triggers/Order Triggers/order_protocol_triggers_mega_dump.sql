CREATE OR REPLACE TRIGGER place_order_user_check
BEFORE INSERT
ON "ORDER"
FOR EACH ROW 
DECLARE 
TYP VARCHAR2(20);
BEGIN
    SELECT "TYPE" INTO TYP FROM "USER" WHERE USER_ID = :NEW.USER_ID;
    IF TYP NOT IN ('Admin','Customer') THEN 
        RAISE_APPLICATION_ERROR(-20001,'User not permitted');
    END IF;
END;
/

CREATE OR REPLACE TRIGGER place_order_symbol_check
BEFORE INSERT
ON "ORDER"
FOR EACH ROW 
DECLARE 
SYM VARCHAR2(40);
BEGIN
    SELECT SYMBOL INTO SYM FROM STOCK WHERE SYMBOL = :NEW.SYMBOL AND BLOCKED = 'F';  
	IF SYM IS NULL THEN  
        RAISE_APPLICATION_ERROR(-20002,'Invalid stock');
	END IF;
END;
/

CREATE OR REPLACE TRIGGER buy_order_amount_check 
BEFORE INSERT OR UPDATE OF LATEST_QUANTITY
ON "ORDER"
FOR EACH ROW 
DECLARE 
NUM_SHARES NUMBER;
ALLOWED_SHARES NUMBER;
BEGIN
    IF :NEW."TYPE" = 'BUY' THEN
        SELECT LOT INTO NUM_SHARES FROM STOCK WHERE SYMBOL = :NEW.SYMBOL;
        SELECT LOT*AVAILABLE_LOTS INTO ALLOWED_SHARES FROM STOCK WHERE SYMBOL = :NEW.SYMBOL;
        IF :NEW.LATEST_QUANTITY*NUM_SHARES > ALLOWED_SHARES OR :NEW.LATEST_QUANTITY*NUM_SHARES < 0 THEN 
            RAISE_APPLICATION_ERROR(-20003,'Invalid amount of stock');
        END IF;
        :NEW.LATEST_QUANTITY := :NEW.LATEST_QUANTITY*NUM_SHARES;
    END IF;
END;
/

CREATE OR REPLACE TRIGGER sell_order_amount_check 
BEFORE INSERT OR UPDATE OF LATEST_QUANTITY
ON "ORDER"
FOR EACH ROW 
DECLARE 
TYP VARCHAR2(20);
NUM_SHARES NUMBER;
AVAILABLE_SHARE_LOTS NUMBER;
AVAILABLE_SHARES NUMBER;
BEGIN
    SELECT NVL(LOT,0) INTO NUM_SHARES FROM STOCK WHERE SYMBOL = :NEW.SYMBOL;
    IF :NEW."TYPE" = 'SELL' THEN
        SELECT "TYPE" INTO TYP FROM "USER" WHERE USER_ID = :NEW.USER_ID;
        IF TYP = 'Admin' THEN
            SELECT 
                NVL(AVAILABLE_LOTS,0) INTO AVAILABLE_SHARE_LOTS 
            FROM "BACKUP STOCK"
            WHERE SYMBOL = :NEW.SYMBOL;
            IF :NEW.LATEST_QUANTITY > AVAILABLE_SHARE_LOTS OR :NEW.LATEST_QUANTITY*NUM_SHARES < 0 THEN 
                RAISE_APPLICATION_ERROR(-20003,'Invalid amount of stock');
            END IF;
        ELSIF TYP = 'Customer' THEN
            SELECT 
                NVL(QUANTITY,0) INTO AVAILABLE_SHARES 
            FROM OWNS 
            WHERE 
                USER_ID = :NEW.USER_ID AND 
                SYMBOL = :NEW.SYMBOL;
            IF :NEW.LATEST_QUANTITY * NUM_SHARES > AVAILABLE_SHARES  OR :NEW.LATEST_QUANTITY*NUM_SHARES < 0 THEN 
                RAISE_APPLICATION_ERROR(-20003,'Invalid amount of stock');
            END IF;
        ELSE 
            RAISE_APPLICATION_ERROR(-20001,'User not permitted');
        END IF;
        :NEW.LATEST_QUANTITY := :NEW.LATEST_QUANTITY*NUM_SHARES;
    END IF;
END;
/

CREATE OR REPLACE TRIGGER latest_update_time_set
BEFORE INSERT OR UPDATE
ON "ORDER"
FOR EACH ROW 
BEGIN
    :NEW.LATEST_UPDATE_TIME := CURRENT_TIMESTAMP;
END;
/


CREATE OR REPLACE TRIGGER transaction_fee_set 
BEFORE INSERT OR UPDATE
ON "ORDER"
FOR EACH ROW
DECLARE 
TYP VARCHAR2(20);
BEGIN
    IF :NEW.STATUS = 'FAILURE' THEN
        :NEW.TRANSACTION_FEE := 0;
    ELSE 
        SELECT "TYPE" INTO TYP FROM "USER" WHERE USER_ID = :NEW.USER_ID;
        IF TYP = 'Admin' THEN 
            :NEW.TRANSACTION_FEE := 0;
        ELSIF TYP = 'Customer' THEN  
            :NEW.TRANSACTION_FEE := ROUND(:NEW.LATEST_PRICE * :NEW.LATEST_QUANTITY * 0.05 / 100,0);
        END IF;
    END IF;
END; 
/

CREATE OR REPLACE TRIGGER transaction_time_set
BEFORE UPDATE
ON "ORDER"
FOR EACH ROW
BEGIN
    IF :NEW.STATUS IN ('FAILURE','SUCCESS') THEN 
        :NEW.TRANSACTION_TIME := CURRENT_TIMESTAMP;
    END IF;
END;
/

CREATE OR REPLACE TRIGGER sell_order_status_check 
BEFORE UPDATE 
ON "ORDER"
FOR EACH ROW
BEGIN
    IF :NEW.STATUS = 'FAILURE' AND :NEW."TYPE" = 'SELL' THEN 
		RAISE_APPLICATION_ERROR(-20004,'Sell order can never fail');
	END IF;
END;
/


